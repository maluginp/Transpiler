package ru.maluginp.transpiler.csharp

import ru.maluginp.transpiler.core.*


class CSharpLang : TrLang {
    override fun format(element: TrElement): String = when (element) {
        is TrPackage -> CSharpTrPackage(element)
        is TrImport -> CSharpTrImport(element)
        is TrIf -> CSharpTrIf(element)
        is TrFor -> CSharpTrFor(element)
        is TrFunc -> CSharpTrFunc(element)
        is TrBinaryOp -> CSharpTrBinaryOp(element)
        is TrUnaryOp -> CSharpTrUnaryOp(element)
        is TrWhile -> CSharpTrWhile(element)
        is TrThrow -> CSharpTrThrow(element)
        is TrReturn -> CSharpTrReturn(element)
        is TrCall -> CSharpTrCall(element)
        is TrCallLambda -> CSharpTrCallLambda(element)
        is TrInterface -> CSharpTrInterface(element)
        is TrClass -> CSharpTrClass(element)
        is TrParent -> CSharpTrParent(element)
        is TrMember -> CSharpTrMember(element)
        is TrObject -> CSharpTrObject(element)
        is TrCompanionObject -> CSharpTrCompanionObject(element)
        is TrEnumClass -> CSharpTrEnumClass(element)
        is TrExprConst -> CSharpTrExprConst(element)
        is TrExprTypeOp -> CSharpTrExprTypeOp(element)
        is TrExprSuper -> CSharpTrExprSuper(element)
        is TrExprThis -> CSharpTrExprThis(element)
        is TrExprContinue -> CSharpTrExprContinue(element)
        is TrExprBreak -> CSharpTrExprBreak(element)
        is TrExprObject -> CSharpTrExprObject(element)
        is TrExprWhen -> CSharpTrExprWhen(element)
        is TrExprWhenEntry -> CSharpTrExprWhenEntry(element)
        is TrExprWhenEntryConditionIn -> CSharpTrExprWhenEntryConditionIn(element)
        is TrExprWhenEntryConditionIs -> CSharpTrExprWhenEntryConditionIs(element)
        is TrExprWhenEntryCondition -> CSharpTrExprWhenEntryCondition(element)
        is TrExprLabeled -> CSharpTrExprLabeled(element)
        is TrExprName -> CSharpTrExprName(element)
        is TrExprProperty -> CSharpTrExprProperty(element)
        is TrPropertyVar -> CSharpTrPropertyVar(element)
        is TrTypeAlias -> CSharpTrTypeAlias(element)
        is TrTypeParam -> CSharpTrTypeParam(element)
        is TrInitBlock -> CSharpTrInitBlock(element)
        is TrEnum -> CSharpTrEnum(element)
        is TrValueArg -> CSharpTrValueArg(element)
        is TrModifier -> CSharpTrModifier(element)
        is TrModifierKeyword -> CSharpTrModifierKeyword(element)
        is TrFuncParam -> CSharpTrFuncParam(element)
        is TrProperty -> CSharpTrProperty(element)
        is TrBlock -> CSharpTrBlock(element)
        is TrStatement -> CSharpTrStatement(element)
        is TrExprBrace -> CSharpTrExprBrace(element)
        is TrExprBraceParam -> CSharpTrExprBraceParam(element)
        is TrAnnotationSet -> CSharpTrAnnotationSet(element)
        is TrAnnotation -> CSharpTrAnnotation(element)
        is TrTypeRefNullable -> CSharpTrTypeRefNullable(element)
        is TrTypeRefDynamic -> CSharpTrTypeRefDynamic(element)
        is TrTypeRefPiece -> CSharpTrTypeRefPiece(element)
        is TrTypeRef -> CSharpTrTypeRef(element)
        is TrTypeRefFunc -> CSharpTrTypeRefFunc(element)
        is TrTypeRefFuncParam -> CSharpTrTypeRefFuncParam(element)
        is TrExprArrayAccess -> CSharpTrExprArrayAccess(element)
        is TrExprCollLit -> CSharpTrExprCollLit(element)
        is TrExprAnnotated -> CSharpTrExprAnnotated(element)
        is TrExprStringTmpl -> CSharpTrExprStringTmpl(element)
        is TrTry -> CSharpTrTry(element)
        is TrCatch -> CSharpTrCatch(element)
        else -> CSharpTrEmpty()
    }.let(TrImplementation::output)
}